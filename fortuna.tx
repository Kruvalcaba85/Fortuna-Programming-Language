BuyIn:
    'buy-in' '(' chips=INT ')' ':'
        functions*=Function
    'stand'
;

Function:
    Pillars | Instruments | Wheels
;


Pillars:
    ForLoop | WhileLoop | IfStatement | VariableDeclaration | Returns
;

 ForLoop:
    'For' '(' var=ID 'in' range_expr=Range ')' '{' 
        body*=Function 
    '}';

WhileLoop:
    'While' '(' condition=Expression ')' '{' body*=Function '}';

IfStatement:
    'If' '(' condition=Expression ')' '{' 
        body*=Function 
    '}' ('else' ':' body*=Function)?;

Suite:
    body*=Function;

VariableDeclaration:
    name=ID '=' value=Expression;

UserFunctionDef:
    name=ID '(' params*=ID[','] ')' '{' body*=Function '}';

Returns:
    'Return' value=Expression;   

Range:
    'range' '(' start=INT ',' end=INT (',' step=INT)? ')';


Instruments:
    Call | Calculation | Roulette | RouletteAccess
;

Call:
    'call' '(' calling=STRING ')' ending=Endings;

Calculation:
    'calc' '(' calculation=Expression ',' bet=ID ')' Endings ;

Roulette:
    'Roulette' name =ID '=' '[' elements +=Expression[','] ']';

RouletteAccess:
    array=ID '[' index=Expression ']';

Wheels:
    NonParamFunction | ParamFunction
;

NonParamFunction:
    name=ID '(' ')' Endings;

ParamFunction:
    name=ID '(' params*=Expression[','] ')' Endings;


Endings:
    Blinds | Laws ;

Blinds:
    '$'+;

Laws:
    '!';

Expression:
    CompExpr;

CompExpr:
    AddExpr ((' ' | '<' | '<=' | '>' | '>=' | '==' | '!=') AddExpr)*;

AddExpr:
    MulExpr (('+' | '-') MulExpr)*;

MulExpr:
    Factor (('*' | '/') Factor)*;

Factor:
    ID | INT | STRING | '(' Expression ')';
